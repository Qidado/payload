{"version":3,"sources":["../../../src/collections/operations/findByID.ts"],"sourcesContent":["import type { FindOneArgs } from '../../database/types.js'\nimport type { CollectionSlug, JoinQuery } from '../../index.js'\nimport type {\n  ApplyDisableErrors,\n  JsonObject,\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  TransformCollectionWithSelect,\n} from '../../types/index.js'\nimport type {\n  Collection,\n  DataFromCollectionSlug,\n  SelectFromCollectionSlug,\n  TypeWithID,\n} from '../config/types.js'\n\nimport { executeAccess } from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { sanitizeJoinQuery } from '../../database/sanitizeJoinQuery.js'\nimport { sanitizeWhereQuery } from '../../database/sanitizeWhereQuery.js'\nimport { NotFound } from '../../errors/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { validateQueryPaths } from '../../index.js'\nimport { lockedDocumentsCollectionSlug } from '../../locked-documents/config.js'\nimport { appendNonTrashedFilter } from '../../utilities/appendNonTrashedFilter.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { sanitizeSelect } from '../../utilities/sanitizeSelect.js'\nimport { replaceWithDraftIfAvailable } from '../../versions/drafts/replaceWithDraftIfAvailable.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments = {\n  collection: Collection\n  currentDepth?: number\n  depth?: number\n  disableErrors?: boolean\n  draft?: boolean\n  id: number | string\n  includeLockStatus?: boolean\n  joins?: JoinQuery\n  overrideAccess?: boolean\n  populate?: PopulateType\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n  trash?: boolean\n}\n\nexport const findByIDOperation = async <\n  TSlug extends CollectionSlug,\n  TDisableErrors extends boolean,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  incomingArgs: Arguments,\n): Promise<ApplyDisableErrors<TransformCollectionWithSelect<TSlug, TSelect>, TDisableErrors>> => {\n  let args = incomingArgs\n\n  try {\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    if (args.collection.config.hooks?.beforeOperation?.length) {\n      for (const hook of args.collection.config.hooks.beforeOperation) {\n        args =\n          (await hook({\n            args,\n            collection: args.collection.config,\n            context: args.req.context,\n            operation: 'read',\n            req: args.req,\n          })) || args\n      }\n    }\n\n    const {\n      id,\n      collection: { config: collectionConfig },\n      currentDepth,\n      depth,\n      disableErrors,\n      draft: draftEnabled = false,\n      includeLockStatus,\n      joins,\n      overrideAccess = false,\n      populate,\n      req: { fallbackLocale, locale, t },\n      req,\n      select: incomingSelect,\n      showHiddenFields,\n      trash = false,\n    } = args\n\n    const select = sanitizeSelect({\n      fields: collectionConfig.flattenedFields,\n      forceSelect: collectionConfig.forceSelect,\n      select: incomingSelect,\n    })\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    const accessResult = !overrideAccess\n      ? await executeAccess({ id, disableErrors, req }, collectionConfig.access.read)\n      : true\n\n    // If errors are disabled, and access returns false, return null\n    if (accessResult === false) {\n      return null!\n    }\n\n    const where = { id: { equals: id } }\n\n    let fullWhere = combineQueries(where, accessResult)\n\n    // Exclude trashed documents when trash: false\n    fullWhere = appendNonTrashedFilter({\n      enableTrash: collectionConfig.trash,\n      trash,\n      where: fullWhere,\n    })\n\n    sanitizeWhereQuery({\n      fields: collectionConfig.flattenedFields,\n      payload: args.req.payload,\n      where: fullWhere,\n    })\n\n    const sanitizedJoins = await sanitizeJoinQuery({\n      collectionConfig,\n      joins,\n      overrideAccess,\n      req,\n    })\n\n    const findOneArgs: FindOneArgs = {\n      collection: collectionConfig.slug,\n      draftsEnabled: draftEnabled,\n      joins: req.payloadAPI === 'GraphQL' ? false : sanitizedJoins,\n      locale: locale!,\n      req: {\n        transactionID: req.transactionID,\n      } as PayloadRequest,\n      select,\n      where: fullWhere,\n    }\n\n    // execute only if there's a custom ID and potentially overwriten access on id\n    if (req.payload.collections[collectionConfig.slug]!.customIDType) {\n      await validateQueryPaths({\n        collectionConfig,\n        overrideAccess,\n        req,\n        where,\n      })\n    }\n    // /////////////////////////////////////\n    // Find by ID\n    // /////////////////////////////////////\n\n    if (!findOneArgs.where?.and?.[0]?.id) {\n      throw new NotFound(t)\n    }\n\n    let result: DataFromCollectionSlug<TSlug> = (await req.payload.db.findOne(findOneArgs))!\n\n    if (!result) {\n      if (!disableErrors) {\n        throw new NotFound(req.t)\n      }\n\n      return null!\n    }\n\n    // /////////////////////////////////////\n    // Include Lock Status if required\n    // /////////////////////////////////////\n\n    if (includeLockStatus && id) {\n      let lockStatus: (JsonObject & TypeWithID) | null = null\n\n      try {\n        const lockDocumentsProp = collectionConfig?.lockDocuments\n\n        const lockDurationDefault = 300 // Default 5 minutes in seconds\n        const lockDuration =\n          typeof lockDocumentsProp === 'object' ? lockDocumentsProp.duration : lockDurationDefault\n        const lockDurationInMilliseconds = lockDuration * 1000\n\n        const lockedDocument = await req.payload.find({\n          collection: lockedDocumentsCollectionSlug,\n          depth: 1,\n          limit: 1,\n          overrideAccess: false,\n          pagination: false,\n          req,\n          where: {\n            and: [\n              {\n                'document.relationTo': {\n                  equals: collectionConfig.slug,\n                },\n              },\n              {\n                'document.value': {\n                  equals: id,\n                },\n              },\n              // Query where the lock is newer than the current time minus lock time\n              {\n                updatedAt: {\n                  greater_than: new Date(new Date().getTime() - lockDurationInMilliseconds),\n                },\n              },\n            ],\n          },\n        })\n\n        if (lockedDocument && lockedDocument.docs.length > 0) {\n          lockStatus = lockedDocument.docs[0]!\n        }\n      } catch {\n        // swallow error\n      }\n\n      result._isLocked = !!lockStatus\n      result._userEditing = lockStatus?.user?.value ?? null\n    }\n\n    // /////////////////////////////////////\n    // Replace document with draft if available\n    // /////////////////////////////////////\n\n    if (collectionConfig.versions?.drafts && draftEnabled) {\n      result = await replaceWithDraftIfAvailable({\n        accessResult,\n        doc: result,\n        entity: collectionConfig,\n        entityType: 'collection',\n        overrideAccess,\n        req,\n        select,\n      })\n    }\n\n    // /////////////////////////////////////\n    // beforeRead - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks?.beforeRead?.length) {\n      for (const hook of collectionConfig.hooks.beforeRead) {\n        result =\n          (await hook({\n            collection: collectionConfig,\n            context: req.context,\n            doc: result,\n            query: findOneArgs.where,\n            req,\n          })) || result\n      }\n    }\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result = await afterRead({\n      collection: collectionConfig,\n      context: req.context,\n      currentDepth,\n      depth: depth!,\n      doc: result,\n      draft: draftEnabled,\n      fallbackLocale: fallbackLocale!,\n      global: null,\n      locale: locale!,\n      overrideAccess,\n      populate,\n      req,\n      select,\n      showHiddenFields: showHiddenFields!,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks?.afterRead?.length) {\n      for (const hook of collectionConfig.hooks.afterRead) {\n        result =\n          (await hook({\n            collection: collectionConfig,\n            context: req.context,\n            doc: result,\n            query: findOneArgs.where,\n            req,\n          })) || result\n      }\n    }\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: collectionConfig,\n      operation: 'findByID',\n      result,\n    })\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    return result as ApplyDisableErrors<\n      TransformCollectionWithSelect<TSlug, TSelect>,\n      TDisableErrors\n    >\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["executeAccess","combineQueries","sanitizeJoinQuery","sanitizeWhereQuery","NotFound","afterRead","validateQueryPaths","lockedDocumentsCollectionSlug","appendNonTrashedFilter","killTransaction","sanitizeSelect","replaceWithDraftIfAvailable","buildAfterOperation","findByIDOperation","incomingArgs","args","collection","config","hooks","beforeOperation","length","hook","context","req","operation","id","collectionConfig","currentDepth","depth","disableErrors","draft","draftEnabled","includeLockStatus","joins","overrideAccess","populate","fallbackLocale","locale","t","select","incomingSelect","showHiddenFields","trash","fields","flattenedFields","forceSelect","accessResult","access","read","where","equals","fullWhere","enableTrash","payload","sanitizedJoins","findOneArgs","slug","draftsEnabled","payloadAPI","transactionID","collections","customIDType","and","result","db","findOne","lockStatus","lockDocumentsProp","lockDocuments","lockDurationDefault","lockDuration","duration","lockDurationInMilliseconds","lockedDocument","find","limit","pagination","updatedAt","greater_than","Date","getTime","docs","_isLocked","_userEditing","user","value","versions","drafts","doc","entity","entityType","beforeRead","query","global","error"],"mappings":"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"}